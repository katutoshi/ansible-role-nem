# Common configuration
# Short server name (will appear as name for the lock file - example: Nis.lock)
nem.shortServerName = {{ nem_shortServerName }}

# In order to be able to start the NEM software (NIS and also NCC) from a removeable media (e.g. USB drive),
# the path, where the database, logs and other files will be saved, can be configured.
# %h - is the home directory of the user (also if the entry is missing) (example: nem.folder = %h/nem)
# . - is the working directory (example: nem.folder = ./nem)
nem.folder = {{ nem_folder }}

# Specifies the maximum number of threads of the thread pool - default is: 500
# NIS runs more than one thread to be responsive to more than one request at a time.
# The higher this value, the more requests can be answered by NIS at the same time,
# but higher values will increase the system requirements (CPU and memory).
nem.maxThreads = {{ nem_maxThreads }}

# protocol, host, ports, paths
nem.protocol = {{ nem_protocol }}
nem.host = {{ nem_host }}
nem.httpPort = {{ nem_httpPort }}
nem.httpsPort = {{ nem_httpsPort }}
nem.websocketPort = {{ nem_websocketPort }}
nem.webContext = {{ nem_webContext }}
nem.apiContext = {{ nem_apiContext }}
nem.homePath = {{ nem_homePath }}
nem.shutdownPath = {{ nem_shutdownPath }}

# Indicates whether or not this node should use a DOS filter
nem.useDosFilter = {{ nem_userDosFilter }}

# List of APIs that should not be audited (pipe-separated)
nem.nonAuditedApiPaths = {{ nem_nonAuditedApiPaths }}

# Denotes the name of the network to join. Available are:
# testnet - the test network that uses test coins and where new features are tested before they are released to the main network.
# mainnet - the main network that uses real coins.
nem.network = {{ nem_network }}

# Indicates whether or not this node should automatically boot even if no boot information is available.
nis.shouldAutoBoot = {{ nis_shouldAutoBoot }}

# NIS auto boot configuration
# CAUTION: Keep in mind that if someone will read key placed here, he might STEAL your XEM
# nis.bootKey: private key of an account that should be used to boot NIS
# nis.bootName: name of the NIS node (you can use anything you like)
nis.bootKey = {{ delegate_private_key }}
nis.bootName = {{ nis_bootName }}

# Indicates whether or not this node should automatically start harvesting on boot.
nis.shouldAutoHarvestOnBoot = {{ nis_shouldAutoHarvestOnBoot }}

# Additional private keys that should automatically start harvesting on boot (pipe-separated).
# CAUTION: Keep in mind that if someone will read key placed here, he might STEAL your XEM
nis.additionalHarvesterPrivateKeys = {{ nis_additionalHarvesterPrivateKeys }}

# The number of regular nodes that this node should communicate with during broadcasts - default is: 5
nis.nodeLimit = {{ nis_nodeLimit }}

# The number of regular nodes that this node should communicate with during time synchronization - default is: 20
nis.timeSyncNodeLimit = {{ nis_timeSyncNodeLimit }}

# Indicates whether or not this node should send binary payloads.
# Sending binary data instead of JSON data makes requests/responses shorter and thus communication faster.
nis.useBinaryTransport = {{ nis_useBinaryTransport }}

# Indicates if the network time should be used for timestamps - if set to 'false', local system time is used
nis.useNetworkTime = {{ nis_useNetworkTime }}

# Indicates the automatic IP detection mode:
# - AutoRequired - automatic IP detection is enabled and is required to succeed in order for this node to boot
# - AutoOptional - automatic IP detection is enabled but is not required to succeed in order for this node to boot
# - Disabled - automatic IP detection is disabled
nis.ipDetectionMode = {{ nis_ipDetectionMode }}

# Maximum number of unlocked accounts. Meaning: maximum number of accounts that are allowed to use this NIS for harvesting
# Keep the value within a reasonable range, a too large value an cause problems for all harvesting accounts.
nis.unlockedLimit = {{ nis_unlockedLimit }}

# Account addresses that are allowed to use this NIS for harvesting (pipe-separated)
# Leave this empty, if you don't want to set any restrictions.
nis.allowedHarvesterAddresses = {{ nis_allowedHarvesterAddresses }}

# Maximum number of transactions that other nodes should return in the block list returned from /chain/blocks-after - default is: 10000
nis.maxTransactions = {{ nis_maxTransactions }}

# Maximum number of transactions in a block - default is: 120
nis.maxTransactionsPerBlock = {{ nis_maxTransactionsPerBlock }}

# The targeted time between two blocks in seconds - default is: 60
nis.blockGenerationTargetTime = {{ nis_blockGenerationTargetTime }}

# The maximum depth of a fork that can be automatically resolved - default is: 360
nis.blockChainRewriteLimit = {{ nis_blockChainRewriteLimit }}

# List of trusted IP addresses (pipe-separated). Requests from these addresses are treated as local requests.
# NIS usually checks if a request comes from the local machine and if not, certain requests get rejected
# (requests involving the private key). These requests will not get rejected, if they come from an IP in this list.
# valid forms are:
# fully qualified ip: 127.0.0.1, 0:0:0:0:0:0:0:1
# host name: bob.nem.ninja
# partial wildcard ip: 127.0.0.*, 0:0:0:0:0:0:0:*
nis.additionalLocalIps = {{ nis_additionalLocalIps }}

# The number of hours to keep the hashes of transactions in memory (-1 = keep forever, 36 is the minimum)
# If transaction hashes are in memory, it is possible to query transactions by hash.
nis.transactionHashRetentionTime = {{ nis_transactionHashRetentionTime }}

# Optional features supported by the local node (pipe-separated).
# TRANSACTION_HASH_LOOKUP: transactions can be retrieved by supplying the transaction hash.
# HISTORICAL_ACCOUNT_DATA: historical account data can be retrieved.
nis.optionalFeatures = {{ nis_optionalFeatures }}

# Configures the features the block chain should use (pipe-separated).
# 1) Consensus algorithm: the algorithms are mutually exclusive.
# PROOF_OF_IMPORTANCE: block chain will use proof of importance consensus algorithm.
# PROOF_OF_STAKE: block chain will use a simple proof of stake consensus algorithm.
# 2) Weighted balance scheme: the schemes are mutually exclusive.
# WB_TIME_BASED_VESTING: block chain uses a time-based vesting of balances.
# WB_IMMEDIATE_VESTING: block chain immediately vests all balances.
#                       This is only recommended for an environment where the participating
#                       nodes can be trusted, i.e. a private network.
# 3) other:
# STABILIZE_BLOCK_TIMES: stablizes gaps between blocks
nis.blockChainFeatures = {{ nis_blockChainFeatures }}

# Indicates whether or not the block loading should be delayed.
# If 'true' NIS will be ready to serve (meaning a NCC can connect to NIS) before the blocks are loaded.
# VPSes which run only a standalone NIS will probably not want to delay.
# Users running both NIS and NCC with GUI will probably want to delay.
nis.delayBlockLoading = {{ nis_delayBlockLoading }}
